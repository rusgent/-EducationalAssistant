from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from database.orm import Database
from handlers.user_routers.states import TestStates
from keyboards import inline_kb

prof_test_router = Router()


@prof_test_router.message(Command('test'))
async def start_test(message: Message, state: FSMContext):
    await message.answer(
        "<b>üìù –ù–∞—á–Ω–µ–º —Ç–µ—Å—Ç!</b>\n\n"
        "<b>–í–æ–ø—Ä–æ—Å 1Ô∏è‚É£:</b> –ö–∞–∫—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?\n\n"
        "<b>üë• –†–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏</b> ‚Äî –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏.\n"
        "<b>üîß –†–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ—Ö–Ω–∏–∫–æ–π</b> ‚Äî –£–ø—Ä–∞–≤–ª—è—Ç—å –∏ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n"
        "<b>üóÇÔ∏è –†–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</b> ‚Äî –°–æ–±–∏—Ä–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        parse_mode='HTML',
        reply_markup=inline_kb.q1_ikb()
    )
    await state.set_state(TestStates.Q1)


@prof_test_router.message(Command('view_results'))
async def cmd_view_results(message: Message):
    rows = await Database.check_result(message.from_user.id)

    if not rows:
        await message.answer(
            "<b>üö´ –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
            parse_mode='HTML'
        )
        return


    results_message = "<b>üìã –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
    print(rows)
    for row in rows:
        result, timestamp = row
        results_message += (
            f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}</b> <i>(–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}</i>)\n"
        )


    await message.answer(results_message, parse_mode='HTML', reply_markup=inline_kb.share_ikb())


@prof_test_router.callback_query(F.data == 'share_result')
async def cb_share_result(callback: CallbackQuery):
    user_id = callback.from_user.id

    result = await Database.check_result(user_id)

    if not result:
        await callback.message.answer(
            "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏.</b>",
            parse_mode='HTML'
        )
        return

    last_result = result[-1]
    timestamp = last_result[1]
    result_text = (
        f"üìä <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç -  <i>{last_result[0]}</i></b>\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è - <i>{timestamp.strftime('%Y-%m-%d %H:%M:%S')}</i></b>\n\n"
        "üéì <b>–ü—Ä–æ–π–¥–∏—Ç–µ</b> –∏ –≤—ã —Ç–µ—Å—Ç –≤ –Ω–∞—à–µ–º <b>—à–∫–æ–ª—å–Ω–æ–º –±–æ—Ç–µ</b> –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–º–µ–Ω–Ω–æ –≤–∞–º!\n"
        "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —à–∫–æ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞</b> - https://t.me/moau3byr_bot"
    )

    await callback.message.answer(
        "<b>üòÅ –°–º–µ–ª–æ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏ –∑–Ω–∞–∫–æ–º—ã–º!</b>",
        parse_mode='HTML'
    )


    await callback.message.answer(result_text, parse_mode='HTML')
    await callback.answer()


@prof_test_router.callback_query(F.data == "test")
async def test_ikb(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    await start_test(callback.message, state)

    await callback.answer()


@prof_test_router.callback_query(TestStates.Q1, F.data.startswith('q1_'))
async def handle_q1(callback: CallbackQuery, state: FSMContext):
    answer = callback.data.split('_')[1]
    await state.update_data(answer1=answer)

    await callback.message.edit_text(
        "<b>üîç –í–æ–ø—Ä–æ—Å 2Ô∏è‚É£:</b> –ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?\n\n"
        "<b>üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</b> ‚Äî –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏.\n"
        "<b>üõ†Ô∏è –°–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ</b> ‚Äî –ò–∑–æ–±—Ä–µ—Ç–∞—Ç—å –∏ –≤–æ–ø–ª–æ—â–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏.\n"
        "<b>üí¨ –û–±—â–∞—Ç—å—Å—è —Å –ª—é–¥—å–º–∏</b> ‚Äî –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏.\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        parse_mode='HTML',
        reply_markup=inline_kb.q2_ikb()
    )
    await state.set_state(TestStates.Q2)


@prof_test_router.callback_query(TestStates.Q2, F.data.startswith('q2_'))
async def handle_q2(callback: CallbackQuery, state: FSMContext):
    answer = callback.data.split('_')[1]
    await state.update_data(answer2=answer)

    await callback.message.edit_text(
        "<b>üí° –í–æ–ø—Ä–æ—Å 3Ô∏è‚É£:</b> –ö–∞–∫–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?\n\n"
        "<b>üî¨ –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</b> ‚Äî –ü—Ä–æ–≤–æ–¥–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
        "<b>üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ</b> ‚Äî –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–µ–±—è —á–µ—Ä–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–æ.\n"
        "<b>‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ</b> ‚Äî –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ä–µ—à–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        parse_mode='HTML',
        reply_markup=inline_kb.q3_ikb()
    )
    await state.set_state(TestStates.Q3)


@prof_test_router.callback_query(TestStates.Q3, F.data.startswith('q3_'))
async def handle_q3(callback: CallbackQuery, state: FSMContext):
    answer = callback.data.split('_')[1]
    await state.update_data(answer3=answer)

    user_data = await state.get_data()
    result = inline_kb.calculate_result(user_data)

    user_id = callback.from_user.id

    await Database.save_result(user_id, result)

    final_message = (
        "<b>‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"<b>üí° –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <i>{result}</i></b>\n\n"
        "<b>üîç –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–æ—à–ª—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ:</b> /view_results\n\n"
        "<b>üìÑ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:</b> /test"
    )

    await callback.message.edit_text(final_message, parse_mode='HTML', reply_markup=inline_kb.menu_ikb())
    await state.clear()
