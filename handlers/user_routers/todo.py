from aiogram import Router
from aiogram import F, Router, Bot
from aiogram.filters import Command
from .states import Task
from keyboards import inline_kb
from aiogram.fsm.context import FSMContext
from database.orm import Database
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

todo_router = Router()


@todo_router.message(Command('todo'))
async def cmd_todo(message: Message):
    TEXT = (f"üìù <b>–¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á</b>\n\n"
    "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏: –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∏—Ö.\n"
    "–Ø –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ä–æ–∫–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö!\n\n"
    "‚ú® <i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏!</i>"
    )

    await message.answer(text=TEXT, reply_markup=inline_kb.get_todo_ikb())


@todo_router.callback_query(F.data == 'add_task')
async def cb_add_task(callback: CallbackQuery, state: FSMContext):
    TEXT = (f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "üöÄ –û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è –º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ—é –∑–∞–¥–∞—á—É, "
        "–Ω–∞–ø–∏—à–∏ –º–Ω–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.\n")

    await callback.message.answer(text=TEXT)
    await state.set_state(Task.add_name_newtask)
    await callback.answer()


@todo_router.callback_query(F.data == 'view_tasks')
async def cb_add_task(callback: CallbackQuery):
    TEXT = (f"üìã <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á</b>\n\n"
            "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! "
            "–Ω–∞–ø–∏—à–∏ –º–Ω–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.\n")

    await callback.message.answer(text=TEXT)
    await callback.answer()


@todo_router.message(Task.add_name_newtask)
async def give_name_task(message: Message, state: FSMContext):
    if message.text:
        task_name = message.text
        await state.update_data(task_name=task_name)
        TEXT = (
            f"<blockquote><b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b> {task_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ???</blockquote>\n\n"
            "üéâ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            "–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∏–ª–∏ <b>—Å—É—Ç—å</b> –∑–∞–¥–∞—á–∏"
        )

        await message.answer(text=TEXT)
        await state.set_state(Task.add_desc_newtask)

    else:
        await message.answer(
            text="‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>–¢–ï–ö–°–¢–û–ú</b>"
        )


@todo_router.message(Task.add_desc_newtask)
async def give_desc_task(message: Message, state: FSMContext):
    if message.text:
        desc_task = message.text
        await state.update_data(desc_task=desc_task)

        data = await state.get_data()
        task_name = data.get('task_name')
        desc_task = data.get('desc_task')

        await Database.set_task(message.from_user.id,
                                task_name, desc_task)

        TEXT = (
            f"<blockquote><b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b> {task_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc_task}</blockquote>\n\n"
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>"
        )

        await message.answer(TEXT, reply_markup=inline_kb.get_view_tasks_ikb())

    else:
        await message.answer(
            text="‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>–¢–ï–ö–°–¢–û–ú</b>"
        )




