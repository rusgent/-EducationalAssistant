from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from database.orm import Database
from handlers.user_routers.states import FavCls
from keyboards import inline_kb, reply_kb

favcls_router = Router()


@favcls_router.message(Command('favorites'))
async def cmd_favorites(message: Message, state: FSMContext):

    await state.clear()
    send_message = await message.answer(text=".", reply_markup=ReplyKeyboardRemove())

    await message.bot.delete_message(chat_id=message.chat.id, message_id=send_message.message_id)

#    await state.set_state(FavCls.slctnum)

    text = (
#        "<b>üó≥ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞</b> ‚Äî "
#        "<i>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –≤—Ä—É—á–Ω—É—é"
#        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 9A –∏–ª–∏ 10–ê)</i>\n\n"
        f"ü§´<b> –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∫–ª–∞—Å—Å—É</b>\n\n"
        "‚ù§ –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:\n"
    )

    list_favcls = await Database.get_favcls_list(message.from_user.id)

    if list_favcls:
        for cls in list_favcls:
            text += f'<i>‚Ä¢ {cls}</i>\n'

    else:
        text += '<i>‚òπ –£ –≤–∞—Å –Ω–µ—Ç—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤</i>'



    await message.answer(
        text,
        reply_markup=inline_kb.get_del_or_add_favcls_or_menu(),
        parse_mode='HTML'
    )


@favcls_router.callback_query(F.data == 'del_cls')
async def cb_del_favcls(callback: CallbackQuery, state: FSMContext):

    await state.set_state(FavCls.delcls)

    user_id = callback.from_user.id

    favcls_list = await Database.get_favcls_list(user_id)

    if len(favcls_list) > 0:

        text = (
                "<b>üó≥ –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ</b> ‚Äî "
                "<i>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ –¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è</i> üëá")

        await callback.message.answer(text=text,
                                      parse_mode='HTML',
                                      reply_markup=inline_kb.get_delfavcls_ikb(favcls_list))
        await callback.answer()

    else:

        await callback.answer(text='‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤!', show_alert=True)


@favcls_router.callback_query(F.data == 'add_cls')
async def cb_add_favcls(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FavCls.slctnum)
    text = (
            "<b>üó≥ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞</b> ‚Äî "
            "<i>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –≤—Ä—É—á–Ω—É—é"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 9A –∏–ª–∏ 10–ê)</i>\n\n")

    await callback.message.answer(text=text,
                                  parse_mode='HTML',
                                  reply_markup=await reply_kb.kb_select_class_num())
    await callback.answer()


@favcls_router.message(FavCls.slctnum)
async def give_lit_favcls(message: Message, state: FSMContext):
    if message.text:
        msg = message.text.strip()

        if message.text in ['5', '6', '7', '8', '9', '10', '11']:
            await state.set_state(FavCls.slctlit)
            res_text = (f"üìö <b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ {msg} ¬´?¬ª –∫–ª–∞—Å—Å–∞</b>\n\n"
                "<b>üî§ –ê –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ç–µ–ø–µ—Ä—å –ª–∏—Ç–µ—Ä–∞–ª –∫–ª–∞—Å—Å–∞! –ï–≥–æ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ –∏–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞\n\n"
                "<i>–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–º–∏ –±—É–∫–≤—É –Ω—É–∂–Ω–æ–≥–æ –¥–ª—è –≤–∞—Å –∫–ª–∞—Å—Å–∞ (–ª—é–±–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞) üòâ</i></b>")

            await state.update_data(selected_class_num=msg)

            await message.answer(text=res_text, reply_markup=await reply_kb.kb_select_class_lit())


        elif len(msg) > 1 and len(msg) < 4 and msg[:-1].isdigit() and 5 <= int(msg[:-1]) <= 11 and msg[-1].isalpha():

            selected_class_num = msg.upper()[:-1]
            selected_class_lit = msg.upper()[-1]

            res = res_cls = selected_class_num + selected_class_lit

            if res_cls in ['9–ê', '9–ë', '5–ê', '5–ë', '5–ü', '10–ê', '10–ë', '11–ê', '11–ë']:

                await state.update_data(selected_class_num=selected_class_num, selected_class_lit=selected_class_lit)

                favcls_list = await Database.get_favcls_list(message.from_user.id)

                if res_cls not in favcls_list:

                    await Database.set_favcls(message.from_user.id, res_cls)
                    res_text = f"üìö <b>–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ {selected_class_num} ¬´{selected_class_lit}¬ª –∫–ª–∞—Å—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ!</b>\n\n" \
                               "üòÅ<b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>"

                    await message.answer(text=res_text, reply_markup=inline_kb.get_new_shedule())
                    await state.clear()

                else:

                    await message.reply(f'üö´ –î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö!')

            else:
                res_text = ("‚ùå <b>–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                            "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä—ã (–æ—Ç 5 –¥–æ 11) –∏ –æ–¥–Ω–æ–π –±—É–∫–≤—ã"
                            "<i> | –ü—Ä–∏–º–µ—Ä: '9–ê', '10–ë', '11–í' –∏ —Ç.–¥.</i>\n\n")
                await message.answer_sticker(
                    sticker='CAACAgIAAxkBAAEM_H9nE2X7FR6PqLJJXsw6rChl2eJusgAC6RMAAiBRQEtjB12ULYwTNjYE')
                await message.answer(text=res_text,
                                 reply_markup=inline_kb.menu_ikb())
                await state.set_state(FavCls.slctnum)

        else:
            res_text = ("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª–∞—Å—Å–∞!</b>\n\n"
                        "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä—ã (–æ—Ç 5 –¥–æ 11)\n"
                        "<i>–ò–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä '9–ê', '10–ë' –∏ —Ç.–¥.)</i>\n\n")

            await message.answer_sticker(
                sticker='CAACAgIAAxkBAAEM_AtnEq5NOXbSot3y4c-QRHar9YA4vgACfxEAAhhA8UrOIDTUp-mQxjYE')
            await message.answer(text=res_text,
                                 reply_markup=inline_kb.menu_ikb())


@favcls_router.message(FavCls.slctlit)
async def slct_day_favcls(message: Message, state: FSMContext):
    if message.text:
        msg = message.text.upper()

        if msg not in ['–ê', '–ë', '–í', '–®', '–ü'] and len(msg) == 1:
            res_text = ("‚ùå <b>–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                        "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–∏—Ç–µ—Ä–∞–ª –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ (–ê, –ë, –í, –®, –ü)"
                        "<i> | –ü—Ä–∏–º–µ—Ä: '–ê', '–ë', '–í' –∏ —Ç.–¥.</i>\n\n"
                        "–ï—Å–ª–∏ –∫–ª–∞—Å—Å –≤—Å–µ —Ç–∞–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n")

            await message.answer_sticker(
                sticker='CAACAgIAAxkBAAEM_H9nE2X7FR6PqLJJXsw6rChl2eJusgAC6RMAAiBRQEtjB12ULYwTNjYE')
            await message.answer(text=res_text,
                                 reply_markup=inline_kb.menu_ikb())

        elif msg in ['–ê', '–ë', '–í', '–®', '–ü'] and len(msg) == 1:
            data = await state.get_data()

            selected_class_num = data.get('selected_class_num')
            selected_class_lit = msg

            await state.update_data(selected_class_num=selected_class_num, selected_class_lit=selected_class_lit)

            res_cls = selected_class_num + selected_class_lit

            if res_cls in ['9–ê', '9–ë', '5–ê', '5–ë', '5–ü', '10–ê', '10–ë', '11–ê', '11–ë']:

                favcls_list = await Database.get_favcls_list(message.from_user.id)

                if res_cls not in favcls_list:

                    await Database.set_favcls(message.from_user.id, res_cls)
                    await message.answer_sticker(
                        sticker='CAACAgIAAxkBAAEM_CdnEsULTvJmtAxQchTdyV9IblWzoAACSEoAAvys-UtFgdP0svH3CDYE',
                        reply_markup=ReplyKeyboardRemove())

                    class_info = (
                        f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ {selected_class_num} ¬´{selected_class_lit}¬ª –∫–ª–∞—Å—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ!</b>\n"
                        f"üòÅ<b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>")

                    await state.clear()

                    await message.answer(f"{class_info}",
                                         reply_markup=inline_kb.get_new_shedule())

                else:

                    await message.reply(f'üö´ –î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö!')

        else:
            res_text = ("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏—Ç–µ—Ä–∞–ª–∞ (–±—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞)!</b>\n\n"
                        "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–∏—Ç–µ—Ä–∞–ª –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ (–ê, –ë, –í, –®, –ü)\n\n")

            await message.answer_sticker(
                sticker='CAACAgIAAxkBAAEM_AtnEq5NOXbSot3y4c-QRHar9YA4vgACfxEAAhhA8UrOIDTUp-mQxjYE')

            await message.answer(text=res_text,
                                 reply_markup=inline_kb.menu_ikb())


@favcls_router.callback_query(F.data.startswith('delcls_'), FavCls.delcls)
async def cb_set_del_favcls(callback: CallbackQuery):
    delcls = callback.data.split('_')[1]

    delete_cls = await Database.del_favcls(callback.from_user.id, delcls)

    if delete_cls:
        await callback.answer(text='üóë –î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', show_alert=True)
        remove_delfavcls_list = await Database.get_favcls_list(callback.from_user.id)
        if not remove_delfavcls_list:
            await callback.message.edit_text(text='<b>üòî –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤\n\n'
                                                  'üóÇ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å -> /favorites</b>')
        else:
            await callback.message.edit_reply_markup(reply_markup=inline_kb.get_delfavcls_ikb(remove_delfavcls_list))
    else:
        await callback.answer(text='ERROR :(', show_alert=True)
